<?php

namespace {{ namespace }};

use {{ rootNamespace }}Http\Controllers\Controller;
use {{ namespacedRequests }}
use {{ rootNamespace }}Http\Resources\{{ model }}Resource;
use {{ rootNamespace }}JsonApi\JsonApiAuthorize;
use {{ rootNamespace }}JsonApi\JsonApiResource;
use {{ namespacedModel }};
use Illuminate\Http\Resources\Json\AnonymousResourceCollection;
use Illuminate\Http\Response;
use Illuminate\Routing\Controllers\HasMiddleware;
use Illuminate\Routing\Controllers\Middleware;

class {{ class }} extends Controller implements HasMiddleware
{
    use JsonApiAuthorize;

    public static function middleware(): array
    {
        return [
            // new Middleware('auth:sanctum', only: ['store', 'update', 'destroy']),
        ];
    }

    /**
     * Display a listing of the resource.
     */
    public function index(): AnonymousResourceCollection
    {
        ${{ modelVariable }} = {{ model }}::paginated([]);
        return {{ model }}Resource::collection(${{ modelVariable }});
    }

    /**
     * Display the specified resource.
     */
    public function show(${{ modelVariable }}): JsonApiResource
    {
        // ${{ modelVariable }} = {{ model }}::where('slug', ${{ modelVariable }})->firstOrFail();
        ${{ modelVariable }} = {{ model }}::findOrFail(${{ modelVariable }});

        return {{ model }}Resource::make(${{ modelVariable }});
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store({{ storeRequest }} $request): JsonApiResource
    {
        // $this->authorize('create', ${{ modelVariable }});
        ${{ modelVariable }} = {{ model }}::create($request->validated('attributes'));

        return {{ model }}Resource::make(${{ modelVariable }});
    }

    /**
     * Update the specified resource in storage.
     */
    public function update({{ storeRequest }} $request, {{ model }} ${{ modelVariable }}): JsonApiResource
    {
        // $this->authorize('update', ${{ modelVariable }});
        ${{ modelVariable }}->update($request->validated('attributes'));

        return {{ model }}Resource::make(${{ modelVariable }});
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{ model }} ${{ modelVariable }}): Response
    {
        // $this->authorize('delete', ${{ modelVariable }});
        ${{ modelVariable }}->delete();
        return response()->noContent();
    }
}
